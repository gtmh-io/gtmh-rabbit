name: Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 10.0.x
    - name: Start RabbitMQ with health check
      run: |
        docker pull rabbitmq:3-management
        docker run -d \
          --hostname my-rabbit \
          --name some-rabbit \
          -p 15672:15672 \
          -p 5672:5672 \
          --health-cmd="rabbitmq-diagnostics -q ping" \
          --health-interval=10s \
          --health-timeout=5s \
          --health-retries=5 \
          rabbitmq:3-management
        
        # Wait for container to be healthy
        echo "Waiting for RabbitMQ to be healthy..."
        until [ "$(docker inspect -f '{{.State.Health.Status}}' some-rabbit)" == "healthy" ]; do
          echo "Waiting..."
          sleep 2
        done
        echo "RabbitMQ is healthy and ready!"
    
    - name: Show RabbitMQ logs (for debugging)
      run: docker logs some-rabbit

    
    - name: Restore dependencies
      run: dotnet restore src
    
    - name: Build
      run: dotnet build src -c Release --no-restore
    
    - name: Run tests
      #run: dotnet test src --no-build --verbosity normal
      run: for D in $(find src -type d -a -name '*UnitTests'); do dotnet run -c Release --no-build --project $D; done

    - name: Cleanup
      if: always()
      run: |
        docker stop some-rabbit || true
        docker rm some-rabbit || true

    - name: Pack NuGet packages
      run: dotnet pack src -c Release --output ./nupkgs

    # Only sign and publish on main branch pushes
    - name: Setup signing certificate
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "${{ secrets.GTMH_SIGNING_CERT }}" | base64 -d > gtmh.io.pfx

    - name: Sign packages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        for package in ./nupkgs/GTMH.*.nupkg; do
          echo "Signing $package..."
          dotnet nuget sign "$package" \
            --certificate-path gtmh.io.pfx \
            --certificate-password "${{ secrets.GTMH_CERT_PASSWORD }}" \
            --timestamper http://timestamp.digicert.com \
            --overwrite || true # or true for self signed certificate
        done

# don't whilst we are self signed
#    - name: Verify signatures
#      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#      run: |
#        for package in ./nupkgs/GTMH.*.nupkg; do
#          echo "Verifying $package..."
#          dotnet nuget verify "$package" --all
#        done


    - name: Publish to NuGet (only on main)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        dotnet nuget push ./nupkgs/GTMH.*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

